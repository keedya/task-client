/**
 * onTaskClient
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Action', 'model/Error', 'model/PostWorkflow'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Action'), require('../model/Error'), require('../model/PostWorkflow'));
  } else {
    // Browser globals (root is window)
    if (!root.OnTaskClient) {
      root.OnTaskClient = {};
    }
    root.OnTaskClient.WorkflowsApi = factory(root.OnTaskClient.ApiClient, root.OnTaskClient.Action, root.OnTaskClient.Error, root.OnTaskClient.PostWorkflow);
  }
}(this, function(ApiClient, Action, Error, PostWorkflow) {
  'use strict';

  /**
   * Workflows service.
   * @module api/WorkflowsApi
   * @version 0.0.1
   */

  /**
   * Constructs a new WorkflowsApi. 
   * @alias module:api/WorkflowsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the workflowsAction operation.
     * @callback module:api/WorkflowsApi~workflowsActionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform an action on a workflow 
     * Perform the specified action on the workflow with the specified instance identifier. Currently, the cancel action is supported. 
     * @param {String} identifier The workflow instance identifier 
     * @param {module:model/Action} action The action property with the value of the desired action
     * @param {module:api/WorkflowsApi~workflowsActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.workflowsAction = function(identifier, action, callback) {
      var postBody = action;

      // verify the required parameter 'identifier' is set
      if (identifier == undefined || identifier == null) {
        throw "Missing the required parameter 'identifier' when calling workflowsAction";
      }

      // verify the required parameter 'action' is set
      if (action == undefined || action == null) {
        throw "Missing the required parameter 'action' when calling workflowsAction";
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/workflows/{identifier}/action', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsDeleteByInstanceId operation.
     * @callback module:api/WorkflowsApi~workflowsDeleteByInstanceIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a workflow 
     * Delete the workflow with the specified instance identifier. 
     * @param {String} identifier The workflow instance identifier 
     * @param {module:api/WorkflowsApi~workflowsDeleteByInstanceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.workflowsDeleteByInstanceId = function(identifier, callback) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier == undefined || identifier == null) {
        throw "Missing the required parameter 'identifier' when calling workflowsDeleteByInstanceId";
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/workflows/{identifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsGet operation.
     * @callback module:api/WorkflowsApi~workflowsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of workflow instances 
     * Get list workflow that have been run, or are currently running. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active Query string to search for specific workflow properties 
     * @param {Integer} opts.skip Query string specifying properties to search for
     * @param {Integer} opts.top Query string specifying properties to search for
     * @param {module:api/WorkflowsApi~workflowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.workflowsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        '$skip': opts['skip'],
        '$top': opts['top']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsGetByInstanceId operation.
     * @callback module:api/WorkflowsApi~workflowsGetByInstanceIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow 
     * Get the workflow with the specified instance identifier. 
     * @param {String} identifier The workflow instance identifier 
     * @param {module:api/WorkflowsApi~workflowsGetByInstanceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.workflowsGetByInstanceId = function(identifier, callback) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier == undefined || identifier == null) {
        throw "Missing the required parameter 'identifier' when calling workflowsGetByInstanceId";
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/workflows/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsPost operation.
     * @callback module:api/WorkflowsApi~workflowsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a workflow 
     * Run a workflow by specifying a workflow graph injectable name. The workflow is not associated with a node. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PostWorkflow} opts.body The body must contain the name property with the value set to the injectable name of the workflow graph to run 
     * @param {String} opts.nodeId pass node id
     * @param {String} opts.name Optionally specify the injectable name of the workflow graph to run
     * @param {module:api/WorkflowsApi~workflowsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.workflowsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'nodeId': opts['nodeId'],
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/workflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
