/**
 * onTaskClient
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Action', 'model/Error', 'model/ErrorResponse', 'model/GenericObj', 'model/PostTasks', 'model/PostWorkflow', 'model/PostWorkflowOptions', 'model/PostWorkflowOptionsDefault', 'model/VersionsResponse', 'model/WorkflowGraph', 'model/WorkflowGraphTask', 'model/WorkflowTask', 'api/GraphsApi', 'api/TasksApi', 'api/WorkflowsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Action'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/GenericObj'), require('./model/PostTasks'), require('./model/PostWorkflow'), require('./model/PostWorkflowOptions'), require('./model/PostWorkflowOptionsDefault'), require('./model/VersionsResponse'), require('./model/WorkflowGraph'), require('./model/WorkflowGraphTask'), require('./model/WorkflowTask'), require('./api/GraphsApi'), require('./api/TasksApi'), require('./api/WorkflowsApi'));
  }
}(function(ApiClient, Action, Error, ErrorResponse, GenericObj, PostTasks, PostWorkflow, PostWorkflowOptions, PostWorkflowOptionsDefault, VersionsResponse, WorkflowGraph, WorkflowGraphTask, WorkflowTask, GraphsApi, TasksApi, WorkflowsApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var OnTaskClient = require('index'); // See note below*.
   * var xxxSvc = new OnTaskClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new OnTaskClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new OnTaskClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new OnTaskClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.0.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Action model constructor.
     * @property {module:model/Action}
     */
    Action: Action,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The GenericObj model constructor.
     * @property {module:model/GenericObj}
     */
    GenericObj: GenericObj,
    /**
     * The PostTasks model constructor.
     * @property {module:model/PostTasks}
     */
    PostTasks: PostTasks,
    /**
     * The PostWorkflow model constructor.
     * @property {module:model/PostWorkflow}
     */
    PostWorkflow: PostWorkflow,
    /**
     * The PostWorkflowOptions model constructor.
     * @property {module:model/PostWorkflowOptions}
     */
    PostWorkflowOptions: PostWorkflowOptions,
    /**
     * The PostWorkflowOptionsDefault model constructor.
     * @property {module:model/PostWorkflowOptionsDefault}
     */
    PostWorkflowOptionsDefault: PostWorkflowOptionsDefault,
    /**
     * The VersionsResponse model constructor.
     * @property {module:model/VersionsResponse}
     */
    VersionsResponse: VersionsResponse,
    /**
     * The WorkflowGraph model constructor.
     * @property {module:model/WorkflowGraph}
     */
    WorkflowGraph: WorkflowGraph,
    /**
     * The WorkflowGraphTask model constructor.
     * @property {module:model/WorkflowGraphTask}
     */
    WorkflowGraphTask: WorkflowGraphTask,
    /**
     * The WorkflowTask model constructor.
     * @property {module:model/WorkflowTask}
     */
    WorkflowTask: WorkflowTask,
    /**
     * The GraphsApi service constructor.
     * @property {module:api/GraphsApi}
     */
    GraphsApi: GraphsApi,
    /**
     * The TasksApi service constructor.
     * @property {module:api/TasksApi}
     */
    TasksApi: TasksApi,
    /**
     * The WorkflowsApi service constructor.
     * @property {module:api/WorkflowsApi}
     */
    WorkflowsApi: WorkflowsApi
  };

  return exports;
}));
